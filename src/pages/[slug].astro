---
import TagList from "@components/article/TagList.astro";
import TOC from "@components/article/TOC.svelte";
import Container from "@components/Container.svelte";
import { contentfulClient, type BlogPost } from "@contentful";
import { formatDate } from "@helpers";
import BaseLayout from "@layouts/BaseLayout.astro";
import Layout from "@layouts/Layout.astro";
import { renderPostContent } from "@lib/post.render";
import { Image } from "astro:assets";
import siteConfig from "@/site.config";
import ReadingProgress from "@components/article/ReadingProgress.svelte";
import { getPostTags, getImageObject } from "@lib/post.render";
import Giscus from "@components/article/Giscus.astro";
import Sharer from "@components/article/Sharer.astro";
import Head from "@/components/Head.astro";
import { Schema } from "astro-seo-schema";
import Article from "@/components/article/Article.astro";

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost",
  });

  const pages = await Promise.all(
    entries.items.map(async (item) => {
      const {
        fields: {
          title,
          description,
          content,
          date,
          slug,
          image,
          tags: tagEntryLinks,
        },
      } = item;

      const tags = await Promise.all(getPostTags(tagEntryLinks));
      const coverImage = await getImageObject(image);
      const { html, toc } = await renderPostContent(content);

      return {
        params: { slug },
        props: {
          title,
          description,
          tags,
          toc,
          coverImage,
          date,
          slug,
          content: html,
          updatedAt: item.sys.updatedAt,
        },
      };
    })
  );

  return pages;
}

const {
  title,
  description,
  content,
  date,
  tags,
  toc,
  slug,
  coverImage,
  updatedAt,
} = Astro.props;

const meta = {
  title: `${title} â€” ${siteConfig.name}`,
  image:
    coverImage?.src || `${Astro.url.origin}${siteConfig.defaultBannerPath}`,
};

const isNotModified =
  new Date(date).getTime() === new Date(updatedAt).getTime();
const publishedDate = isNotModified ? new Date(date) : new Date(updatedAt);
---

<Layout>
  <Head
    slot="head"
    seoData={{
      title: meta.title,
      description,
      openGraph: {
        basic: {
          type: "article",
          title: meta.title,
          image: meta.image,
        },
        optional: {
          description,
        },
      },
      twitter: {
        title: meta.title,
        image: meta.image,
        description,
      },
    }}
  />
  <Schema
    slot="head"
    item={{
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      name: meta.title,
      description,
      headline: meta.title,
      image: meta.image,
      url: `${siteConfig.origin}/${slug}`,
      datePublished: new Date(date).toISOString(),
      dateModified: publishedDate.toISOString(),
      author: {
        "@type": "Person",
        name: siteConfig.author,
        url: `${siteConfig.origin}/#about`,
      },
      publisher: {
        "@type": "Organization",
        name: siteConfig.name,
        url: siteConfig.origin,
      },
      mainEntity: {
        "@type": "Article",
        articleSection: "Blog",
        headline: meta.title,
        url: `${siteConfig.origin}/${slug}`,
        description,
        image: meta.image,
        datePublished: new Date(date).toISOString(),
        dateModified: publishedDate.toISOString(),
        author: {
          "@type": "Person",
          name: siteConfig.author,
          url: `${siteConfig.origin}/#about`,
        },
        publisher: {
          "@type": "Organization",
          name: siteConfig.name,
          url: siteConfig.origin,
        },
      },
    }}
  />
  <BaseLayout class="min-h-dvh">
    <Container>
      <div class="text-left sm:text-center">
        <h1
          transition:name={`title-${slug}`}
          class="text-2xl sm:text-3xl md:text-4xl font-bold font-lora leading-normal text-pretty"
        >
          {title}
        </h1>
        {
          description && (
            <p class="mt-3 text-muted text-balance text-sm sm:text-base">
              {description}
            </p>
          )
        }
        <p
          class="mt-5 text-balance text-muted text-sm sm:text-base"
          transition:name={`date-${slug}`}
        >
          {isNotModified ? "Dipublikasikan" : "Diperbarui"} pada <span
            class="font-semibold">{formatDate(publishedDate.toString())}</span
          >
        </p>
      </div>
      <TagList {tags} class="mt-4 max-w-fit sm:mx-auto" />
      {
        coverImage && (
          <div class="mt-8 space-y-4 text-center">
            <a href={coverImage.src} class="glightbox">
              <Image
                src={coverImage.src}
                alt={title}
                width={coverImage.width}
                height={coverImage.height}
                loading="eager"
                decoding="async"
                fetchpriority="high"
                layout="full-width"
                class="w-full h-auto rounded-xl"
              />
            </a>
            {coverImage.description && (
              <p aria-label="Image description" class="text-sm text-muted mt-5">
                {coverImage.description}
              </p>
            )}
          </div>
        )
      }
      <div class="flex flex-col-reverse lg:flex-row items-start gap-8 mt-10">
        <div class="w-full max-w-3.5xl lg:max-w-prose">
          <Article {content} {slug} />
          <div class="mt-6 border-t pt-8 border-muted">
            <div class="mb-10 flex items-center gap-5 flex-wrap">
              <p class="font-medium">Bagikan artikel ini ke:</p>
              <Sharer
                imageUrl={meta.image}
                title={meta.title}
                description={description}
              />
            </div>
            <Giscus />
          </div>
        </div>
        {toc.length > 0 && <TOC client:load items={toc} />}
      </div>
    </Container>
  </BaseLayout>
</Layout>

<ReadingProgress client:load />
