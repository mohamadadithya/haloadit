---
import TagList from "@components/article/TagList.astro";
import TOC from "@components/article/TOC.svelte";
import Container from "@components/Container.svelte";
import { contentfulClient, type BlogPost } from "@contentful";
import { formatDate } from "@helpers";
import BaseLayout from "@layouts/BaseLayout.astro";
import Layout from "@layouts/Layout.astro";
import { slide } from "astro:transitions";
import { renderPostContent } from "@lib/post.render";
import { Image } from "astro:assets";
import { normalizeImageUrl } from "@helpers";
import { SEO } from "astro-seo";
import siteConfig from "@/site.config";
import ReadingProgress from '@components/article/ReadingProgress.svelte';

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost",
  });

  const pages = await Promise.all(
    entries.items.map(async (item) => {
      const {
        fields: { title, description, content, date, slug, image },
        metadata: { tags },
      } = item;

      const { html, toc } = await renderPostContent(content);

      let imageObject: null | {
        src: string;
        description: string;
        width: number;
        height: number;
      } = null;

      if (image) {
        const imageId = image.sys.id;
        const asset = await contentfulClient.getAsset(imageId);
        const file = asset.fields.file;

        imageObject = {
          src: file?.url ? normalizeImageUrl(file.url) : "",
          description: asset.fields.description || "",
          width: file?.details.image?.width || 1500,
          height: file?.details.image?.height || 1000,
        };
      }

      return {
        params: { slug },
        props: {
          title,
          description,
          tags,
          toc,
          coverImage: imageObject,
          content: html,
          date,
          slug,
          updatedAt: item.sys.updatedAt
        },
      };
    })
  );

  return pages;
}

const { title, description, content, date, tags, toc, slug, coverImage, updatedAt } =
  Astro.props;

const meta = {
  title: `${title} â€” ${siteConfig.name}`,
  image: coverImage?.src || `${Astro.url.origin}${siteConfig.defaultBannerPath}`,
};

const isNotModified = new Date(date).getTime() === new Date(updatedAt).getTime();
const publishedDate = isNotModified ? new Date(date) : new Date(updatedAt)

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  name: meta.title,
  description,
  headline: meta.title,
  image: meta.image,
  url: `${siteConfig.origin}/${slug}`,
  datePublished: new Date(date).toISOString(),
  dateModified: publishedDate.toISOString(),
  author: {
    "@type": "Person",
    name: siteConfig.author,
    url: `${siteConfig.origin}/#about`,
  },
  publisher: {
    "@type": "Organization",
    name: siteConfig.name,
    url: siteConfig.origin,
  },
  mainEntity: {
    "@type": "Article",
    articleSection: "Blog",
    headline: meta.title,
    url: `${siteConfig.origin}/${slug}`,
    description,
    image: meta.image,
    datePublished: new Date(date).toISOString(),
    dateModified: publishedDate.toISOString(),
    author: {
      "@type": "Person",
      name: siteConfig.author,
      url: `${siteConfig.origin}/#about`,
    },
    publisher: {
      "@type": "Organization",
      name: siteConfig.name,
      url: siteConfig.origin,
    },
  }
}
---

<SEO
  title={meta.title}
  {description}
  openGraph={{
    basic: {
      type: "article",
      title: meta.title,
      image: meta.image,
    },
    optional: {
      description,
    }
  }}
  twitter={{
    title: meta.title,
    image: meta.image,
    description,
  }}
/>

<script type="application/ld+json" set:html={JSON.stringify(structuredData)}></script>

<Layout>
  <BaseLayout class="min-h-dvh">
    <Container>
      <div class="text-left sm:text-center">
        <h1
          transition:name={`title-${slug}`}
          class="text-2xl sm:text-3xl md:text-4xl font-bold font-lora leading-normal text-pretty"
        >
          {title}
        </h1>
        {
          description && (
            <p class="mt-3 text-muted text-balance text-sm sm:text-base">{description}</p>
          )
        }
        <p
          class="mt-5 text-balance text-muted text-sm sm:text-base"
          transition:name={`date-${slug}`}
        >
          {isNotModified ? "Dipublikasikan" : "Diperbarui"} pada <span class="font-semibold">{formatDate(publishedDate.toString())}</span>
        </p>
      </div>
      <TagList {tags} class="mt-4" />
      {
        coverImage && (
          <div class="my-8 space-y-4 text-center">
            <Image
              src={coverImage.src}
              alt={title}
              width={coverImage.width}
              height={coverImage.height}
              loading="eager"
              decoding="async"
              fetchpriority="high"
              layout="full-width"
              class="w-full h-auto rounded-xl"
            />
            {coverImage.description && (
              <p aria-label="Image description" class="text-sm text-muted mt-5">
                {coverImage.description}
              </p>
            )}
          </div>
        )
      }
      <div class="flex flex-col-reverse lg:flex-row items-start gap-8 mt-8">
        <div class="w-full max-w-3.5xl lg:max-w-prose">
          <article
            transition:name={`article-${slug}`}
            transition:animate={slide({ duration: 850 })}
            class="prose max-w-none"
            set:html={content}
          />
        </div>
        {toc.length > 0 && <TOC client:load items={toc} />}
      </div>
    </Container>
  </BaseLayout>
</Layout>

<ReadingProgress client:load />

<script>
  document.addEventListener("click", handleCopyCodeBlock);

  /**
   * Handles the click event for copy buttons within code blocks.
   *
   * This function checks if the clicked target is a copy button within a
   * code block. If so, it retrieves the code to be copied from the button's
   * data attributes and writes it to the clipboard. It also temporarily
   * changes the button's text to indicate that the code has been copied.
   *
   * @param event - The click event triggered on the document.
   */

  function handleCopyCodeBlock(event: Event) {
    const target = event.target as HTMLButtonElement;

    if (target.matches(".code-block-wrapper__copy-button")) {
      const code =
        target.dataset.clipboardCode ||
        target.getAttribute("data-clipboard-code");

      navigator.clipboard.writeText(code as string);
      target.textContent = "Disalin!";

      setTimeout(() => (target.textContent = "Salin"), 1500);
    }
  }
</script>
